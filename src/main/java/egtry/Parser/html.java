/* html.java */
/* Generated By:JavaCC: Do not edit this line. html.java */
package egtry.Parser;
import java.io.StringReader;


public class html implements htmlConstants {
   public static StringBuilder str=new StringBuilder();
        public static void main(String[] args) throws ParseException{

         try {
                  new html(new StringReader(args[0])).create();
                  System.out.println(str.toString());
            }
            catch(Throwable e) {
            System.out.println("Syntax Error: " + e.getMessage());
         }
     }

  final public String create() throws ParseException, ParseException {Token x;
    jj_consume_token(8);
    element();
      return null;
  }

  final public void element() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case 9:{
      img();
      break;
      }
    case 13:{
      para();
      break;
      }
    case 14:{
      url();
      break;
      }
    case 12:{
      header();
      break;
      }
    default:
      jj_la1[0] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
}

  final public void img() throws ParseException {Token d;
str.append("<img src=\"");
    jj_consume_token(9);
    jj_consume_token(10);
    jj_consume_token(11);
    quote();
    d = jj_consume_token(sentence);
    quote();
str.append(d).append("\" />");
System.out.println( str.toString());
}

  final public void header() throws ParseException, ParseException {
    jj_consume_token(12);
str.append("<h1 ");
str.append("style=\" ");
    decorated_text();
str.append("</h1>");
System.out.println( str.toString());
}

  final public void para() throws ParseException {
    jj_consume_token(13);
str.append("<p ");
str.append("style=\" ");
    decorated_text();
str.append("</p>");
System.out.println( str.toString());
}

  final public void url() throws ParseException {
    jj_consume_token(14);
str.append("<a ");
    decorated_url();
str.append("</a>");
System.out.println( str.toString());
}

  final public void decorated_text() throws ParseException, ParseException {String k="" ;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case 10:{
      jj_consume_token(10);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 16:{
        k = text();
        break;
        }
      case 17:{
        color();
        break;
        }
      case 18:{
        font();
        break;
        }
      default:
        jj_la1[1] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 15:{
        jj_consume_token(15);
        decorated_text();
        break;
        }
      default:
        jj_la1[2] = jj_gen;
        ;
      }
if(!(str.toString()).endsWith("\" >"))str.append("\" >").append(k);
      break;
      }
    default:
      jj_la1[3] = jj_gen;
str.append(k);
    }
}

  final public void decorated_url() throws ParseException {String k1="" ;
    jj_consume_token(10);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case 16:{
      k1 = text();
      break;
      }
    case 17:
    case 18:{
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 17:{
        color();
        break;
        }
      case 18:{
        font();
        break;
        }
      default:
        jj_la1[4] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
      }
    case 14:{
      link();
str.append(" style=\" ");
      break;
      }
    default:
      jj_la1[5] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case 15:{
      jj_consume_token(15);
      decorated_url();
      break;
      }
    default:
      jj_la1[6] = jj_gen;
      ;
    }
if(!(str.toString()).endsWith("\" >"))str.append("\" >").append(k1);
str.append(k1);
}

  final public void link() throws ParseException {Token p;
    jj_consume_token(14);
    quote();
str.append("href=\"");
    p = jj_consume_token(sentence);
    quote();
str.append(p).append("\"");
}

  final public String text() throws ParseException {Token r;
    jj_consume_token(16);
    quote();
    r = jj_consume_token(sentence);
    quote();
{if ("" != null) return r.image;}
    throw new Error("Missing return statement in function");
}

  final public void color() throws ParseException {Token r1;
    jj_consume_token(17);
str.append("color:");
    quote();
    r1 = jj_consume_token(sentence);
    quote();
str.append(r1).append("; ");
}

  final public void font() throws ParseException {Token r2;
    jj_consume_token(18);
str.append("font-family:");
    quote();
    r2 = jj_consume_token(sentence);
    quote();
str.append(r2).append(";");
}

  final public void quote() throws ParseException {
    jj_consume_token(19);
}

  /** Generated Token Manager. */
  public htmlTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[7];
  static private int[] jj_la1_0;
  static {
	   jj_la1_init_0();
	}
	private static void jj_la1_init_0() {
	   jj_la1_0 = new int[] {0x7200,0x70000,0x8000,0x400,0x60000,0x74000,0x8000,};
	}

  /** Constructor with InputStream. */
  public html(java.io.InputStream stream) {
	  this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public html(java.io.InputStream stream, String encoding) {
	 try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source = new htmlTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 7; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
	  ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
	 try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 7; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public html(java.io.Reader stream) {
	 jj_input_stream = new SimpleCharStream(stream, 1, 1);
	 token_source = new htmlTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 7; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
	if (jj_input_stream == null) {
	   jj_input_stream = new SimpleCharStream(stream, 1, 1);
	} else {
	   jj_input_stream.ReInit(stream, 1, 1);
	}
	if (token_source == null) {
 token_source = new htmlTokenManager(jj_input_stream);
	}

	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 7; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public html(htmlTokenManager tm) {
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 7; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(htmlTokenManager tm) {
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 7; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
	 Token oldToken;
	 if ((oldToken = token).next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 if (token.kind == kind) {
	   jj_gen++;
	   return token;
	 }
	 token = oldToken;
	 jj_kind = kind;
	 throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
	 if (token.next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 jj_gen++;
	 return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
	 Token t = token;
	 for (int i = 0; i < index; i++) {
	   if (t.next != null) t = t.next;
	   else t = t.next = token_source.getNextToken();
	 }
	 return t;
  }

  private int jj_ntk_f() {
	 if ((jj_nt=token.next) == null)
	   return (jj_ntk = (token.next=token_source.getNextToken()).kind);
	 else
	   return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
	 jj_expentries.clear();
	 boolean[] la1tokens = new boolean[20];
	 if (jj_kind >= 0) {
	   la1tokens[jj_kind] = true;
	   jj_kind = -1;
	 }
	 for (int i = 0; i < 7; i++) {
	   if (jj_la1[i] == jj_gen) {
		 for (int j = 0; j < 32; j++) {
		   if ((jj_la1_0[i] & (1<<j)) != 0) {
			 la1tokens[j] = true;
		   }
		 }
	   }
	 }
	 for (int i = 0; i < 20; i++) {
	   if (la1tokens[i]) {
		 jj_expentry = new int[1];
		 jj_expentry[0] = i;
		 jj_expentries.add(jj_expentry);
	   }
	 }
	 int[][] exptokseq = new int[jj_expentries.size()][];
	 for (int i = 0; i < jj_expentries.size(); i++) {
	   exptokseq[i] = jj_expentries.get(i);
	 }
	 return new ParseException(token, exptokseq, tokenImage);
  }

  private boolean trace_enabled;

/** Trace enabled. */
  final public boolean trace_enabled() {
	 return trace_enabled;
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

}
